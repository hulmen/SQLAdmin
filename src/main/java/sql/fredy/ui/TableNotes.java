/*
 * This code is generated by Fredy's SQL-Admin Tool visit http://www.hulmen.ch/admin
 *
 *
 * This class represents a JTable for display only of the query printed below.
 * you can fill this table with the calling these methods:
 * addBunch(ArrayList<sql.fredy.ui.QueryBeanNotes> a);
 * addQueryBeanNotes(QueryBeanNotes row);
 * addRow(Vector v);  // where v is the vector called from QueryBeanNotes.getVector()
 * addTableRowObject(QueryBeanNotes v); 
 */
package sql.fredy.ui;

import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.AbstractTableModel;

public class TableNotes extends AbstractTableModel {

    public static final int ID = 0;
    public static final int RUNAT = 1;
    public static final int TITLE = 2;
    public static final int NOTE = 3;
    public static final int HASHCODE = 4;
    private Vector data;
    private String[] columnNames = {
        "ID",
        "Created",
        "Title",
        "Note"
    };

    public TableNotes() {
        data = new Vector();
    }

    @Override
    public int getRowCount() {
        return data.size();
    }

    @Override
    public int getColumnCount() {
        return columnNames.length;
    }

    @Override
    public String getColumnName(int column) {
        if (columnNames[column] != null) {
            return columnNames[column];
        } else {
            return "";
        }
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Vector rowData = (Vector) data.elementAt(rowIndex);
        return rowData.elementAt(columnIndex);
    }

    @Override
    public void setValueAt(Object value, int row, int col) {
        Vector rowData = (Vector) data.elementAt(row);
        rowData.setElementAt(value, col);
        data.setElementAt(rowData, row);

        fireTableCellUpdated(row, col);
    }

    public QueryBeanNotes getRowAt(int row) {
        QueryBeanNotes a = new QueryBeanNotes();
        a.setId(((Integer) getValueAt(row, ID)).intValue());
        a.setRunat((java.sql.Timestamp) getValueAt(row, RUNAT));
        a.setTitle((String) getValueAt(row, TITLE));
        a.setNote((String) getValueAt(row, NOTE));
        //a.setHashcode(((Integer) getValueAt(row,HASHCODE)).intValue());
        return a;
    }

    public void addTableRowObject(QueryBeanNotes v) {
        addRow(v.getVector());
    }

    @Override
    public boolean isCellEditable(int row, int col) {
        return false;
    }

    public void removeRow(int row) {
        data.removeElementAt(row);
        fireTableChanged(null);
    }

    public void addRow(Vector v) {
        data.addElement(v);
        fireTableChanged(null);
    }

    public int delete(int id) {
        for (int i = 0; i < data.size(); i++) {
            try {
                if (id == ((Integer) getValueAt(i, ID)).intValue()) {
                    if (i >= 0) {
                        removeRow(i);
                    }
                    break;
                }
            } catch (Exception e) {

            }
        }
        int k =  0;
        if (getRowCount() > 0) k =((Integer) getValueAt(getRowCount() - 1, ID)).intValue();
        
        return k;
    }

    public void addRow(QueryBeanNotes v) {
        data.addElement(v.getVector());
    }

    public void addBunch(ArrayList a) {
        clearData();
        Vector v;
        QueryBeanNotes satz;
        for (int i = 0; i < a.size(); i++) {
            v = new Vector();
            satz = new QueryBeanNotes();
            satz = (QueryBeanNotes) a.get(i);
            v.addElement(satz.getId());
            v.addElement((java.sql.Timestamp) satz.getRunat());
            v.addElement((String) satz.getTitle());
            v.addElement((String) satz.getNote());
            //v.addElement((Integer) new Integer(satz.getHashcode()));
            addRow(v);
        }
    }

    public void clearData() {
        data.removeAllElements();
        fireTableDataChanged();
    }
}
