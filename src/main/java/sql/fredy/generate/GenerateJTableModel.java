package sql.fredy.generate;

/**
 * GenerateJTabelModel, generates JTableModel-Java-Code out of a table and is a
 * part of Admin... Version 1.0, August 2001 Fredy Fischer
 *
 * this has been created to query SQL-Databases it only returns a JPanel, so it
 * can easily been used in different kind of windows
 *
 * Admin is a Tool around JDBC-enabled SQL-Databases to do basic jobs for
 * DB-Administrations, as create / delete / alter and query tables it also
 * creates indices and generates simple Java-Code to access DBMS-tables and
 * exports data into various formats
 *
 *
 * Copyright (c) 2017 Fredy Fischer, sql@hulmen.ch
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
*
 */
import sql.fredy.share.BasicAdmin;
import sql.fredy.metadata.DbInfo;
import sql.fredy.metadata.SingleColumnInfo;
import sql.fredy.metadata.PrimaryKey;
import java.util.Vector;
import java.util.Calendar;

public class GenerateJTableModel extends BasicAdmin {

    public Vector table;
    private DbInfo dbi;

    String theCode = "";

    /**
     * Get the value of theCode.
     *
     * @return value of theCode.
     */
    public String getTheCode() {
        return theCode;
    }

    /**
     * Set the value of theCode.
     *
     * @param v Value to assign to theCode.
     */
    public void setTheCode(String v) {
        this.theCode = v;
    }

    String copyright = " put your Copyright here";

    /**
     * Get the value of copyright.
     *
     * @return value of copyright.
     */
    public String getCopyright() {
        return copyright;
    }

    /**
     * Set the value of copyright.
     *
     * @param v Value to assign to copyright.
     */
    public void setCopyright(String v) {
        this.copyright = v;
    }

    public GenerateJTableModel(String table,
            String schema) {

        super(table, schema);
        init();
    }

    public GenerateJTableModel(String table) {

        super(table);
        init();
    }

    private String toDay() {

        Calendar c = Calendar.getInstance();

        return Integer.toString(c.get(Calendar.YEAR)) + "-"
                + Integer.toString(c.get(Calendar.MONTH) + 1) + "-"
                + Integer.toString(c.get(Calendar.DATE));

    }

    private String firstUpper(String s) {
        s = s.substring(0, 1).toUpperCase() + s.substring(1);
        return s;
    }

    private String makeLength(String s, int l) {
        for (int i = s.length(); i <= l; i++) {
            s = s + " ";
        }
        return s;
    }

    private int findLength() {
        int l = 0;
        Vector v = new Vector();
        v = dbi.getColumnNames(getTable());
        String s = (String) v.elementAt(0);
        l = s.length();
        for (int i = 1; i < v.size(); i++) {
            s = (String) v.elementAt(i);
            if (l < s.length()) {
                l = s.length();
            }
        }

        return l;

    }

    private String firstPhase() {
        String ph1Code;

        // Package-Name and Author-Info
        ph1Code = "package applications." + getDatabase() + ";\n\n"
                + "/** this has been generated by Fredy's Admin-Tool for SQL-Databases\n"
                + " *  Date: " + toDay() + "\n"
                + " * \n"
                + " *  RDBMS:    " + dbi.getProductName() + " \n"
                + " *  Database: " + getDatabase() + "\n"
                + " *  Table:    " + getTable() + "\n *\tDescription:\n";

        ph1Code = ph1Code + " *\n" + dbi.getTableDescription(getTable(), " * ");
        ph1Code = ph1Code + " *\n"
                + " *  Admin is free software (MIT-License)\n"
                + " *\n"
                + " *  Fredy Fischer\n"
                + " *  Hulmenweg 36\n"
                + " *  8405 Winterthur\n"
                + " *  Switzerland\n"
                + " *\n"
                + " * sql@hulmen.ch\n"
                + " *\n\n" + getCopyright() + "\n\n"
                + " **/\n\n";

        return ph1Code;
    }

    private String importPackages() {

        String s = "";
        s = s + "import java.util.Vector;\n";
        s = s + "import applications.basics.*;\n";

        return s;
    }

    private String getClassName() {
        return "public class " + firstUpper(getTable()) + "TableModel extends GenericTableModel { \n\n\n";
    }

    private String getColumnNames() {
        String s = "   public String[] columnNames = { ";
        Vector v = new Vector();
        v = dbi.getColumnNames(getTable());
        for (int i = 0; i < v.size(); i++) {
            if (i > 0) {
                s = s + ",\n";
            } else {
                s = s + "\n";
            }
            s = s + "                                   \"" + firstUpper((String) v.elementAt(i)) + "\"";
        }
        s = s + "\n" + "                              };\n";

        s = s + "   public String getColumnName(int i) {  return columnNames[i]; } \n"
                + "   public int getColumnCount() { return columnNames.length; }\n\n";

        return s;
    }

    private String getFieldNames() {

        String s = "   public String[] fieldNames = { ";
        Vector v = new Vector();
        v = dbi.getColumnNames(getTable());
        for (int i = 0; i < v.size(); i++) {
            if (i > 0) {
                s = s + ",\n";
            } else {
                s = s + "\n";
            }
            s = s + "                                   \"" + (String) v.elementAt(i) + "\"";
        }
        s = s + "\n" + "                              };\n";
        return s;
    }

    private String getIsEditable() {
        Vector pk = new Vector();
        Vector v = new Vector();
        String s = "\n";

        pk = dbi.getPk(getTable());
        if (pk.size() == 0) {
            return "\n// I can only update, if I know the primary key\n"
                    + "// because I need to write back to the DB\n\n"
                    + "     public boolean isCellEditable(int row, int col) { \n"
                    + "         return false;\n"
                    + "     }\n";
        }

        s = s + "// as the Primarykey(s) are known, I can write back to the DB all fields\n"
                + "// not beeing part of the Primarykey\n"
                + "    public boolean isCellEditable(int row, int col) { \n"
                + "        boolean b = true;\n";

        v = dbi.getColumnNames(getTable());
        for (int i = 0; i < v.size(); i++) {

            // it is easier to say per default yes and deny if not -> if primary key
            boolean write = false;
            for (int j = 0; j < pk.size(); j++) {
                String a = (String) v.elementAt(i);
                PrimaryKey primkey = new PrimaryKey();
                primkey = (PrimaryKey) pk.elementAt(j);
                String b = (String) primkey.getColumnName();
                if (a.equals((String) b)) {
                    write = true;
                    j = pk.size();
                }
            }
            String c = (String) v.elementAt(i);
            if (write) {
                s = s + "        if ( col == " + c.toUpperCase() + " ) b = false;\n";
            }
        }
        s = s + "        return b;\n"
                + "    }\n";
        return s;
    }

    private String getVariables() {
        int lng = findLength();
        String s = "";
        Vector v = new Vector();
        v = dbi.getColumnNames(getTable());
        for (int i = 0; i < v.size(); i++) {
            String a = (String) v.elementAt(i);
            s = s + "public static final int " + makeLength(a.toUpperCase(), lng) + "\t=\t" + Integer.toString(i) + ";\n";
        }
        return s;
    }

    private String getSetValueAt() {
        String s = "";
        s = "\n\n//setting values back to the DB\n\n"
                + "    public void setValueAt(Object value, int row, int col) {\n"
                + "        Vector rowData = (Vector)data.elementAt(row);\n"
                + "        rowData.setElementAt(value,col);\n"
                + "        data.setElementAt(rowData,row);\n\n"
                + "        String komma = getKomma(fieldNames[col]);\n"
                + "        String query = \"update " + getTable()
                + " set \" + fieldNames[col] + \" = \" + komma + rowData.elementAt(col).toString() + komma ;\n  "
                + "      query = query + \"" + getWhereforPK() + "\";\n";
        s = s + "\n" + "        SqlUpdateQuery sq = new SqlUpdateQuery(getHost(),getUser(),getPassword(),getDatabase(),query);\n";
        s = s + "\n        fireTableCellUpdated(row, col);\n";
        s = s + "\n    }\n";

        return s;
    }

    // getting where condition for PrimaryKey
    private String getWhereforPK() {
        String s = " where ";
        Vector pk = new Vector();

        pk = dbi.getPk(getTable());
        for (int i = 0; i < pk.size(); i++) {
            if (i > 0) {
                s = s + " and ";
            }
            PrimaryKey primkey = new PrimaryKey();
            primkey = (PrimaryKey) pk.elementAt(i);
            String b = (String) primkey.getColumnName();
            String komma = getKomma(b);
            s = s + b + " = " + komma + "\" + getValueAt(row," + b.toUpperCase() + ") + \"" + komma;
        }

        return s;
    }

    public String getKomma(String column) {
        String s = "";
        SingleColumnInfo sci = new SingleColumnInfo();
        sci = dbi.getColumnInfo(getDatabase(), getTable(), column);

        if (sci.getData_type() == java.sql.Types.CHAR) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.VARCHAR) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.BINARY) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.LONGVARBINARY) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.VARBINARY) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.TIME) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.DATE) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.TIMESTAMP) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.INTEGER) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.NUMERIC) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.DOUBLE) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.FLOAT) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.BIGINT) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.BIT) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.BLOB) {
            s = "'";
        }
        if (sci.getData_type() == java.sql.Types.CLOB) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.DECIMAL) {
            s = "";
        }
        if (sci.getData_type() == java.sql.Types.OTHER) {
            s = "'";
        }

        return s;
    }

    private String getConstructor() {
        String s = "";
        s = "\n    public " + firstUpper(getTable()) + "TableModel" + "(String host,\n"
                + "                             String user,\n"
                + "                             String password,\n"
                + "                             String database,\n"
                + "                             String table,\n"
                + "                             String schema) {\n\n"
                + "            super(host,user,password,database,table,schema);\n"
                + "            setQuery(\"select * from " + getTable() + " \");\n"
                + "      }\n\n";

        String s2 = "\n\n";
        s2 = s2 + "\n    public " + firstUpper(getTable()) + "TableModel" + "(t_connect con,\n"
                + "                             String table,\n"
                + "                             String schema) {\n\n"
                + "              super(con,table,schema);\n"
                + "              setQuery(\"select * from " + getTable() + " \");\n"
                + "      }\n\n";

        return s + s2;
    }

    // this implements a getRow() method returning the Object as a
    // [TableName]Row Object
    private String getRows() {
        String s = "\n\n   " + firstUpper(getTable()) + "Row row;\n\n"
                + "    /**\n"
                + "       * get the Value of the actual row as Row-Object\n"
                + "       * @return value of the Row-Object.\n"
                + "       */\n"
                + "    public " + firstUpper(getTable()) + "Row getRow(int r) {\n"
                + "\n"
                + "        row = new " + firstUpper(getTable()) + "Row(getCon());\n";

        Vector v = new Vector();
        v = dbi.getColumnNames(getTable());

        for (int i = 0; i < v.size(); i++) {

            SingleColumnInfo sci = new SingleColumnInfo();
            sci = dbi.getColumnInfo(getDatabase(), getTable(), (String) v.elementAt(i));
            s = s + "        row.set" + firstUpper(isJava((String) v.elementAt(i)))
                    + "((" + javaType(sci.getData_type()) + ")";

            if (javaType(sci.getData_type()).toLowerCase().startsWith("int")) {
                s = s + "((Integer)getValueAt(r," + isJava((String) v.elementAt(i)).toUpperCase() + ")).intValue());\n";
            } else {
                if ((javaType(sci.getData_type()).toLowerCase().startsWith("float")) || (javaType(sci.getData_type()).toLowerCase().startsWith("decimal"))) {
                    s = s + "((Float)getValueAt(r," + isJava((String) v.elementAt(i)).toUpperCase() + ")).floatValue());\n";
                } else {
                    if (javaType(sci.getData_type()).toLowerCase().startsWith("double")) {
                        s = s + "((Double)getValueAt(r," + isJava((String) v.elementAt(i)).toUpperCase() + ")).doubleValue());\n";
                    } else {
                        s = s + "getValueAt(r," + isJava((String) v.elementAt(i)).toUpperCase() + "));\n";
                    }
                }
            }
        }
        s = s + "        return row;\n";
        s = s + "    }\n";
        return s;
    }

    //Data-Type things  
    private String javaType(short colType) {

        String s = "String";
        if (colType == java.sql.Types.CHAR) {
            s = "String";
        }
        if (colType == java.sql.Types.VARCHAR) {
            s = "String";
        }
        if (colType == java.sql.Types.BINARY) {
            s = "String";
        }
        if (colType == java.sql.Types.LONGVARBINARY) {
            s = "String";
        }
        if (colType == java.sql.Types.VARBINARY) {
            s = "String";
        }
        if (colType == java.sql.Types.TIME) {
            s = "java.sql.Time";
        }
        if (colType == java.sql.Types.DATE) {
            s = "java.sql.Date";
        }
        if (colType == java.sql.Types.TIMESTAMP) {
            s = "java.sql.Timestamp";
        }
        if (colType == java.sql.Types.INTEGER) {
            s = "int";
        }
        if (colType == java.sql.Types.NUMERIC) {
            s = "float";
        }
        if (colType == java.sql.Types.DOUBLE) {
            s = "double";
        }
        if (colType == java.sql.Types.FLOAT) {
            s = "float";
        }
        if (colType == java.sql.Types.BIGINT) {
            s = "int";
        }
        if (colType == java.sql.Types.BIT) {
            s = "int";
        }
        if (colType == java.sql.Types.BLOB) {
            s = "String";
        }
        if (colType == java.sql.Types.CLOB) {
            s = "String";
        }
        if (colType == java.sql.Types.DECIMAL) {
            s = "float";
        }
        if (colType == java.sql.Types.OTHER) {
            s = "String";
        }

        return s;

    }

    private void init() {

        dbi = new DbInfo();

        theCode = firstPhase();
        theCode = theCode + importPackages();
        theCode = theCode + getClassName();
        theCode = theCode + getColumnNames();
        theCode = theCode + getFieldNames();
        theCode = theCode + getVariables();
        theCode = theCode + getIsEditable();
        theCode = theCode + getSetValueAt();
        theCode = theCode + getRows();
        theCode = theCode + getConstructor();
        theCode = theCode + "\n}";
    }

    private String isJava(String s) {

        if (!Character.isJavaIdentifierStart(s.charAt(0))) {
            s = "adm_" + s;
        }
        return s;

    }

    public static void main(String args[]) {        
        String table = null;
        String schema = "%";

        System.out.println("\nFredy's Generate JTableModel"
                + "\nSyntax: java sql.fredy.generate.GenerateJTableModel -t TABLE {-s SCHEMA}");
        if (args.length < 1) {
            System.exit(0);
        }

        int i = 0;
        while (i < args.length) {

 
            if (args[i].equals("-s")) {
                i++;
                schema = args[i];
            }
            if (args[i].equals("-t")) {
                i++;
                table = args[i];
            }
            i++;
        }
        GenerateJTableModel g = new GenerateJTableModel( table, schema);
        System.out.println(g.theCode);
    }
}
